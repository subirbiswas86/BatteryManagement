/**
 * @file battery.hpp
 * @brief Defines a battery class.
 *
 * A battery is consist of three cells and switches.
 * Battery provides a output voltage and output current when
 * connected to a load. It discharges the cells untill
 * a cutoff voltage is reached.
 *
 * @author Subir Biswas
 * @date 24/04/2016
 * @see battery.cpp
 */
#ifndef  BATTERY_CLASS
#define  BATTERY_CLASS


#include <thread>	// std::thread
#include <mutex>	// std::mutex


/**
 * @brief defines a battery
 *
 * get & set different values
 *
 * @see battery
 **/



class Battery
{
	public:
		Battery();
		bool run(double load,double resolution,double speed);
		bool stop(void);
		double getVout(void);
		double getIout(void);
		bool setCutOffVoltage(double cutoff);
		double getElapsedTime(void);
		char getSwitchStatus(int Cell);
		bool IsRunning(void);
		double getLoadResistance(void);
		bool getShiftingPoints(void);
		bool getDropAmounts(void);

	private:
		SingleBatt *Cell[3];		///<Holds the cells that are added. @see addCell
		bool Switch[3];		///<A switch for each cell
		double Vout;			///<Output voltage of the battery in Volts.
		double Iout;			///<Output current of the battery in Ampere.
		double ElapsedTime;		///<Time for which the battery is running in mS.
		double CutOffVoltage;	///<Battery will be disconnected when Output voltage drops below this. expressed in Volts.
		double tollarance;
		std::thread* Runner;	///<Pointer to the runner thread
		std::mutex SimState;	///<Used to signal thread terminaton event
		void runBattery(double load,double resolution,double speed);
		bool ContinueRunning(void);
		int count;				///<number of cells added in the battery
		std::mutex mtx; 	///<Lock to synchronize access to members from different thread and unlock

		
};

class SingleBatt
{
	public:
		bool setInitialVoltage(double initv);
		bool setSeriesResistance(double sres);
		bool setCapacity(double cap);
		
		bool lock(Battery* owner);
		bool unlock(Battery* owner);
		bool update(Battery* owner,bool connected, double scurrent, double runtime);

		SingleBatt();

		double getInitialVoltage(void);
		double getSeriesResistance(void);
		double getSourceCurrent(void);
		double getCapacity(void);
		double getRemainingCapacityPercentage(void);

	private:
		bool Locked;				///<Denotes the cell is connected to a battery and the parameters are locked
		Battery* AttachedTo;		///<Denotes which battery it is connected to
		double InitialVoltage;	///<Initial voltage of the cell inn Volts. @see setInitialVoltage @see getInitialVoltage
		double SeriesResistance;	///<Series resistance of the cell in Ohms. @see setSeriesResistance @see getSeriesResistance
		double Capacity;			///<Initial capacity of the cell in AmS. @see setCapacity @see getCapacity
		double Shift;		///<First gradient change in the discharge curve. expressed as percentage of descharged capacity.
		double Drop;				///<Voltage drop at shift1. expressed as percentage
		double Gradient;			///<Current slop of the discharge curve. Measured as Voltage per Capacity
		double ConstantK;			///<Constant factor of discharge curve equation. Measeured as Volt.
		double m1;			///<One of three relative gradients. Constant ratio.
		double DischargedCapacity;  ///<Capacity of the cell already discharged. Unit AmS.
		double RemainigCapacity;	///<Percentage of capacity remaining. (%)
		double SourceCurrent;		///<Current sourced by the cell in Ampere.
		double CurrentVoltage;		///<Current voltage of the cell in Volts.

};

#endif //BATTERY_CLASS
